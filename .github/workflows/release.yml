name: Flutter Release

on:
  push:
    branches:
      - main  # Trigger on push to main branch, adjust as needed
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the private repository code
      - name: Check out private repository
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.PRIVATE_REPO_URL }}
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          path: private-repo

      # Step 2: Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
            channel: stable
            flutter-version: 3.24.3

      - name: List files in current directory
        run: ls -R


      # Step 3: Install dependencies
      - name: Install dependencies
        run: flutter pub get
        working-directory: private-repo

      # Step 3.5: Running Build Runner
      - name: Install dependencies
        run: dart pub run build_runner build --delete-conflicting-outputs
        working-directory: private-repo

      # Step 4: Build APK and/or iOS artifacts
      - name: Build Flutter APK
        run: flutter build apk --release --dart-define-from-file flavors/smart_store/production.json
        working-directory: private-repo

      # Step 5: Check out the release repository
      - name: Check out release repository
        uses: actions/checkout@v3
        with:
          repository: Smart-Bill-Book/smart-bill-book-release
          token: ${{ secrets.GITHUB_TOKEN }}
          path: release-repo

      # Step 6: Copy build artifacts to release repository
      - name: Copy APK to release repository
        run: cp private-repo/build/app/outputs/flutter-apk/app-release.apk release-repo/

      # Step 7: Commit and push changes to release repository
      - name: Commit and push APK
        run: |
          cd release-repo
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Release new version - $(date +'%Y-%m-%d')"
          git push

      # Step 8: Create a new release in the release repository
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: v0.0.${{ github.run_number }}
          release_name: "Flutter App Release"
          body: "New release generated by GitHub Actions."
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

    #   # Step 9: Upload the APK as a release asset
    #   - name: Upload APK to Release
    #     uses: actions/upload-release-asset@v1
    #     with:
    #       upload_url: ${{ steps.create-release.outputs.upload_url }}
    #       asset_path: release-repo/app-release.apk
    #       asset_name: app-release.apk
    #       asset_content_type: application/vnd.android.package-archive
